<?xml version='1.0' encoding='utf-8'?>
<class id="VoodooI2CController" interface="true" name="VoodooI2CController" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief> Implements an Intel LPSS Designware I2C Controller</brief>
  <doc>This is the base class from which all implementations of a physical
Intel LPSS Designware I2C Controller should inherit from. The members of this class
are responsible for low-level interfacing with the physical hardware. For the driver implementing
the properiety Designware I2C controller interface, see <ref ref="VoodooI2CControllerDriver#VoodooI2CControllerDriver">VoodooI2CControllerDriver</ref>.
</doc>
  <base access="public">
    <type name="IOService" />
  </base>
  <subclass access="public" name="VoodooI2CACPIController" ref="VoodooI2CACPIController#VoodooI2CACPIController">
    <brief> Implements an ACPI Intel LPSS Designware I2C Controller</brief>
  </subclass>
  <subclass access="public" name="VoodooI2CPCIController" ref="VoodooI2CPCIController#VoodooI2CPCIController">
    <brief> Implements a PCI Intel LPSS Designware I2C Controller</brief>
  </subclass>
  <variable id="VoodooI2CController::gMetaClass" name="gMetaClass">
    <type name="MetaClass" ref="VoodooI2CController::MetaClass#VoodooI2CController::MetaClass" />
  </variable>
  <variable id="VoodooI2CController::metaClass" name="metaClass">
    <type name="OSMetaClass" qualifier=" const const *" />
  </variable>
  <class name="MetaClass" ref="VoodooI2CController::MetaClass#VoodooI2CController::MetaClass" />
  <field id="VoodooI2CController::nub" name="nub">
    <type name="VoodooI2CControllerNub" qualifier="*" ref="VoodooI2CControllerNub#VoodooI2CControllerNub" />
  </field>
  <field id="VoodooI2CController::physical_device" name="physical_device">
    <type name="VoodooI2CControllerPhysicalDevice" qualifier="*" ref="VoodooI2CControllerPhysicalDevice#VoodooI2CControllerPhysicalDevice" />
  </field>
  <constructor abstract="yes" id="VoodooI2CController::VoodooI2CController" name="VoodooI2CController" />
  <method abstract="yes" id="VoodooI2CController::getMetaClass" name="getMetaClass" virtual="yes">
    <return>
      <type name="OSMetaClass" qualifier=" const *" />
    </return>
  </method>
  <method abstract="yes" id="VoodooI2CController::probe" name="probe" virtual="yes">
    <brief> Implemented to beat Apple's own LPSS kexts</brief>
    <doc>Apple has their own Intel LPSS controller kernel extensions which (as far
as we can tell) are not compatible with the ones found on PCs. We implement
a probe function in order to attach ourselves to the I2C controller before
Apple's kext does.

</doc>
    <return>
      <doc>A pointer to this instance of VoodooI2CController</doc>
      <type name="VoodooI2CController" qualifier="*" ref="VoodooI2CController#VoodooI2CController" />
    </return>
    <argument id="VoodooI2CController::probe::provider" name="provider">
      <doc>The provider which we have matched against</doc>
      <type name="IOService" qualifier="*" />
    </argument>
    <argument id="VoodooI2CController::probe::score" name="score">
      <doc>Probe score as specified in the matched personality</doc>
      <type name="SInt32" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CController::readRegister" name="readRegister">
    <brief> Reads a controller register</brief>
    <return>
      <doc>The value of the register</doc>
      <type name="UInt32" />
    </return>
    <argument id="VoodooI2CController::readRegister::offset" name="offset">
      <doc>The offset of the register relative to the controller's base address</doc>
      <type builtin="yes" name="int" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CController::start" name="start" virtual="yes">
    <brief> Starts the physical controller</brief>
    <doc>This function is called after <ref ref="VoodooI2CController#VoodooI2CController::probe">VoodooI2CController::probe</ref> and is responsible for allocating the resources
needed by the physical controller. This includes initialising system power management
and calling <ref ref="VoodooI2CController#VoodooI2CController::publishNub">VoodooI2CController::publishNub</ref>.

</doc>
    <return>
      <doc>*true* on successful start, *false* otherwise</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="VoodooI2CController::start::provider" name="provider">
      <doc>The provider which we have matched against</doc>
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CController::stop" name="stop" virtual="yes">
    <brief> Stops the physical controller</brief>
    <doc>This function is called before <ref ref="VoodooI2CController#VoodooI2CController::free">VoodooI2CController::free</ref> and is responsible for deallocating the resources
that were allocated in <ref ref="VoodooI2CController#VoodooI2CController::start">VoodooI2CController::start</ref>. This includes stopping system power management and
stopping the associated controller nub.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="VoodooI2CController::stop::provider" name="provider">
      <doc>The provider which we have matched against</doc>
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CController::writeRegister" name="writeRegister">
    <brief> Writes a specified value into a controller register</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="VoodooI2CController::writeRegister::value" name="value">
      <doc>The *UInt32* value to be written</doc>
      <type name="UInt32" />
    </argument>
    <argument id="VoodooI2CController::writeRegister::offset" name="offset">
      <doc>The offset of the register relative to the controller's base address</doc>
      <type builtin="yes" name="int" />
    </argument>
  </method>
  <constructor abstract="yes" access="protected" id="VoodooI2CController::VoodooI2CController" name="VoodooI2CController">
    <argument id="VoodooI2CController::VoodooI2CController::" name="">
      <type name="OSMetaClass" qualifier=" const *" />
    </argument>
  </constructor>
  <destructor abstract="yes" access="protected" id="VoodooI2CController::~VoodooI2CController" name="~VoodooI2CController" virtual="yes" />
  <method abstract="yes" access="protected" id="VoodooI2CController::mapMemory" name="mapMemory">
    <brief> Maps the controller's memory to a virtual address</brief>
    <return>
      <doc>*KIOReturnSuccess* on successful mapping, *kIOReturnDeviceError*
 otherwise</doc>
      <type name="IOReturn" />
    </return>
  </method>
  <method abstract="yes" access="protected" id="VoodooI2CController::publishNub" name="publishNub">
    <brief> Publishes a <ref ref="VoodooI2CControllerNub#VoodooI2CControllerNub">VoodooI2CControllerNub</ref> entry into the IORegistry for matching</brief>
    <doc>This function instantiates a new <ref ref="VoodooI2CControllerNub#VoodooI2CControllerNub">VoodooI2CControllerNub</ref> object and attaches it
to the current VoodooI2CController object. It then starts the nub and calls
VoodooI2CControllerNub::registerService to publish the nub and begin the matching
process.

</doc>
    <return>
      <doc>*kIOReturnSuccess* on successful publish, *kIOReturnError* otherwise</doc>
      <type name="IOReturn" />
    </return>
  </method>
  <variable access="private" id="VoodooI2CController::superClass" name="superClass">
    <type name="OSMetaClass" qualifier=" const const *" />
  </variable>
  <field access="private" id="VoodooI2CController::debug_logging" name="debug_logging">
    <type builtin="yes" name="bool" />
  </field>
  <method abstract="yes" access="private" id="VoodooI2CController::free" name="free" virtual="yes">
    <brief> Frees <ref ref="VoodooI2CController#VoodooI2CController::VoodooI2CController">VoodooI2CController::VoodooI2CController</ref> and <ref ref="VoodooI2CController#VoodooI2CController::VoodooI2CController">VoodooI2CController::VoodooI2CController</ref> class</brief>
    <doc>This is the last function called during the unload routine and
frees the memory allocated in <ref ref="VoodooI2CController#VoodooI2CController::init">VoodooI2CController::init</ref>.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" access="private" id="VoodooI2CController::init" name="init" virtual="yes">
    <brief> Initialises <ref ref="VoodooI2CController#VoodooI2CController::VoodooI2CController">VoodooI2CController::VoodooI2CController</ref> and <ref ref="VoodooI2CController#VoodooI2CController::VoodooI2CController">VoodooI2CController::VoodooI2CController</ref> class</brief>
    <doc>This is the first function called during the load routine and
allocates the memory needed for <ref ref="VoodooI2CControllerPhysicalDevice#VoodooI2CControllerPhysicalDevice">VoodooI2CControllerPhysicalDevice</ref>.

</doc>
    <return>
      <doc>*true* if the successfully initialised, *false* otherwise</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="VoodooI2CController::init::properties" name="properties">
      <doc>Contains the properties of the matched provider</doc>
      <type name="OSDictionary" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" access="private" id="VoodooI2CController::releaseResources" name="releaseResources">
    <brief> Releases resources allocated in <ref ref="VoodooI2CController#VoodooI2CController::start">VoodooI2CController::start</ref>
    </brief>
    <doc>This function is called during a graceful exit from <ref ref="VoodooI2CController#VoodooI2CController::start">VoodooI2CController::start</ref> and during
execution of <ref ref="VoodooI2CController#VoodooI2CController::stop">VoodooI2CController::stop</ref> in order to release resources retained by <ref ref="VoodooI2CController#VoodooI2CController::start">VoodooI2CController::start</ref>.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" access="private" id="VoodooI2CController::setPowerState" name="setPowerState" virtual="yes">
    <brief> Sets the physical power state of the controller</brief>
    <doc>This function is called by the operating system's power management services
to instruct the controller to enter a certain power state.

</doc>
    <return>
      <doc>*kIOPMAckImplied* on succesful state change, *kIOReturnError* otherwise</doc>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CController::setPowerState::whichState" name="whichState">
      <doc>The power state the device is expected to enter represented by either
 *kIOPMPowerOn* or *kIOPMPowerOff*</doc>
      <type builtin="yes" name="unsigned long" />
    </argument>
    <argument id="VoodooI2CController::setPowerState::whatDevice" name="whatDevice">
      <doc>The power management policy maker</doc>
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
</class>
