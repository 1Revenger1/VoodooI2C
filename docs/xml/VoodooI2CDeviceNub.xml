<?xml version='1.0' encoding='utf-8'?>
<class id="VoodooI2CDeviceNub" interface="true" name="VoodooI2CDeviceNub" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief> Implements a device nub to which an instance of a device driver may attach. Examples include &amp;lt;VoodooI2CHIDDevice.&amp;gt;</brief>
  <doc>The members of this class implement
</doc>
  <base access="public">
    <type name="IOService" />
  </base>
  <variable id="VoodooI2CDeviceNub::gMetaClass" name="gMetaClass">
    <type name="MetaClass" ref="VoodooI2CDeviceNub::MetaClass#VoodooI2CDeviceNub::MetaClass" />
  </variable>
  <variable id="VoodooI2CDeviceNub::metaClass" name="metaClass">
    <type name="OSMetaClass" qualifier=" const const *" />
  </variable>
  <class name="MetaClass" ref="VoodooI2CDeviceNub::MetaClass#VoodooI2CDeviceNub::MetaClass" />
  <constructor abstract="yes" id="VoodooI2CDeviceNub::VoodooI2CDeviceNub" name="VoodooI2CDeviceNub" />
  <method abstract="yes" id="VoodooI2CDeviceNub::attach" name="attach">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="VoodooI2CDeviceNub::attach::provider" name="provider">
      <type name="IOService" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::attach::child" name="child">
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::disableInterrupt" name="disableInterrupt" virtual="yes">
    <return>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::disableInterrupt::source" name="source">
      <type builtin="yes" name="int" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::enableInterrupt" name="enableInterrupt" virtual="yes">
    <return>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::enableInterrupt::source" name="source">
      <type builtin="yes" name="int" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::getInterruptType" name="getInterruptType" virtual="yes">
    <return>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::getInterruptType::source" name="source">
      <type builtin="yes" name="int" />
    </argument>
    <argument id="VoodooI2CDeviceNub::getInterruptType::interruptType" name="interruptType">
      <type builtin="yes" name="int" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::getMetaClass" name="getMetaClass" virtual="yes">
    <return>
      <type name="OSMetaClass" qualifier=" const *" />
    </return>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::getWorkLoop" name="getWorkLoop">
    <return>
      <type name="IOWorkLoop" qualifier="*" />
    </return>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::readI2C" name="readI2C">
    <return>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::readI2C::values" name="values">
      <type name="UInt8" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::readI2C::length" name="length">
      <type name="UInt16" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::registerInterrupt" name="registerInterrupt" virtual="yes">
    <return>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::registerInterrupt::source" name="source">
      <type builtin="yes" name="int" />
    </argument>
    <argument id="VoodooI2CDeviceNub::registerInterrupt::target" name="target">
      <type name="OSObject" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::registerInterrupt::handler" name="handler">
      <type name="IOInterruptAction" />
    </argument>
    <argument id="VoodooI2CDeviceNub::registerInterrupt::refcon" name="refcon">
      <type builtin="yes" name="void" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::start" name="start" virtual="yes">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="VoodooI2CDeviceNub::start::provider" name="provider">
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::stop" name="stop" virtual="yes">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="VoodooI2CDeviceNub::stop::provider" name="provider">
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::unregisterInterrupt" name="unregisterInterrupt" virtual="yes">
    <return>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::unregisterInterrupt::source" name="source">
      <type builtin="yes" name="int" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::writeI2C" name="writeI2C">
    <return>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::writeI2C::values" name="values">
      <type name="UInt8" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::writeI2C::length" name="length">
      <type name="UInt16" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::writeReadI2C" name="writeReadI2C">
    <return>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::writeReadI2C::write_buffer" name="write_buffer">
      <type name="UInt8" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::writeReadI2C::write_length" name="write_length">
      <type name="UInt16" />
    </argument>
    <argument id="VoodooI2CDeviceNub::writeReadI2C::read_buffer" name="read_buffer">
      <type name="UInt8" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::writeReadI2C::read_length" name="read_length">
      <type name="UInt16" />
    </argument>
  </method>
  <constructor abstract="yes" access="protected" id="VoodooI2CDeviceNub::VoodooI2CDeviceNub" name="VoodooI2CDeviceNub">
    <argument id="VoodooI2CDeviceNub::VoodooI2CDeviceNub::" name="">
      <type name="OSMetaClass" qualifier=" const *" />
    </argument>
  </constructor>
  <destructor abstract="yes" access="protected" id="VoodooI2CDeviceNub::~VoodooI2CDeviceNub" name="~VoodooI2CDeviceNub" virtual="yes" />
  <variable access="private" id="VoodooI2CDeviceNub::superClass" name="superClass">
    <type name="OSMetaClass" qualifier=" const const *" />
  </variable>
  <field access="private" id="VoodooI2CDeviceNub::acpi_device" name="acpi_device">
    <type name="IOACPIPlatformDevice" qualifier="*" />
  </field>
  <field access="private" id="VoodooI2CDeviceNub::command_gate" name="command_gate">
    <type name="IOCommandGate" qualifier="*" />
  </field>
  <field access="private" id="VoodooI2CDeviceNub::controller" name="controller">
    <type name="VoodooI2CControllerDriver" qualifier="*" ref="VoodooI2CControllerDriver#VoodooI2CControllerDriver" />
  </field>
  <field access="private" id="VoodooI2CDeviceNub::controller_name" name="controller_name">
    <type builtin="yes" name="char" qualifier=" const *" />
  </field>
  <field access="private" id="VoodooI2CDeviceNub::gpio_controller" name="gpio_controller">
    <type name="VoodooGPIO" qualifier="*" />
  </field>
  <field access="private" id="VoodooI2CDeviceNub::gpio_irq" name="gpio_irq">
    <type builtin="yes" name="int" />
  </field>
  <field access="private" id="VoodooI2CDeviceNub::gpio_pin" name="gpio_pin">
    <type name="UInt16" />
  </field>
  <field access="private" id="VoodooI2CDeviceNub::i2c_address" name="i2c_address">
    <type name="UInt8" />
  </field>
  <field access="private" id="VoodooI2CDeviceNub::has_gpio_interrupts" name="has_gpio_interrupts">
    <type builtin="yes" name="bool" />
  </field>
  <field access="private" id="VoodooI2CDeviceNub::use_10bit_addressing" name="use_10bit_addressing">
    <type builtin="yes" name="bool" />
  </field>
  <field access="private" id="VoodooI2CDeviceNub::work_loop" name="work_loop">
    <type name="IOWorkLoop" qualifier="*" />
  </field>
  <method abstract="yes" access="private" id="VoodooI2CDeviceNub::getDeviceResources" name="getDeviceResources">
    <return>
      <type name="IOReturn" />
    </return>
  </method>
  <method abstract="yes" access="private" id="VoodooI2CDeviceNub::getGPIOController" name="getGPIOController">
    <return>
      <type name="VoodooGPIO" qualifier="*" />
    </return>
  </method>
  <method abstract="yes" access="private" id="VoodooI2CDeviceNub::readI2CGated" name="readI2CGated">
    <return>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::readI2CGated::values" name="values">
      <type name="UInt8" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::readI2CGated::length" name="length">
      <type name="UInt16" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" access="private" id="VoodooI2CDeviceNub::releaseResources" name="releaseResources">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" access="private" id="VoodooI2CDeviceNub::writeI2CGated" name="writeI2CGated">
    <return>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::writeI2CGated::values" name="values">
      <type name="UInt8" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::writeI2CGated::length" name="length">
      <type name="UInt16" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" access="private" id="VoodooI2CDeviceNub::writeReadI2CGated" name="writeReadI2CGated">
    <return>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::writeReadI2CGated::write_buffer" name="write_buffer">
      <type name="UInt8" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::writeReadI2CGated::write_length" name="write_length">
      <type name="UInt16" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::writeReadI2CGated::read_buffer" name="read_buffer">
      <type name="UInt8" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::writeReadI2CGated::read_length" name="read_length">
      <type name="UInt16" qualifier="*" />
    </argument>
  </method>
</class>
