<?xml version='1.0' encoding='utf-8'?>
<class id="VoodooI2CDeviceNub" interface="true" name="VoodooI2CDeviceNub" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief> Implements a device nub to which an instance of a device driver may attach. Examples include <ref ref="VoodooI2CHIDDevice#VoodooI2CHIDDevice">VoodooI2CHIDDevice</ref>
  </brief>
  <doc>The members of this class are responsible for low-level interfacing with an I2C slave device. The public
member functions that are not inherited from &amp;lt;IOService&amp;gt; collectively form the so-called 'device API'.
Device drivers access the API in order to perform low-level hardware operations such as receiving interrupts
and I2C protocol messaging.
</doc>
  <base access="public">
    <type name="IOService" />
  </base>
  <variable id="VoodooI2CDeviceNub::gMetaClass" name="gMetaClass">
    <type name="MetaClass" ref="VoodooI2CDeviceNub::MetaClass#VoodooI2CDeviceNub::MetaClass" />
  </variable>
  <variable id="VoodooI2CDeviceNub::metaClass" name="metaClass">
    <type name="OSMetaClass" qualifier=" const const *" />
  </variable>
  <class name="MetaClass" ref="VoodooI2CDeviceNub::MetaClass#VoodooI2CDeviceNub::MetaClass" />
  <constructor abstract="yes" id="VoodooI2CDeviceNub::VoodooI2CDeviceNub" name="VoodooI2CDeviceNub" />
  <method abstract="yes" id="VoodooI2CDeviceNub::attach" name="attach">
    <brief> Attaches <ref ref="VoodooI2CController#VoodooI2CController">VoodooI2CController</ref> class</brief>
    <doc>This function is called by <ref ref="VoodooI2CControllerDriver#VoodooI2CControllerDriver">VoodooI2CControllerDriver</ref> in order for the nub to attach itself
and perform its initialisation routine.

</doc>
    <return>
      <doc>*true* if the successfully attached and initialised, *false* otherwise</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="VoodooI2CDeviceNub::attach::provider" name="provider">
      <doc>The controller driving the slave device</doc>
      <type name="IOService" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::attach::child" name="child">
      <doc>The physical ACPI slave device</doc>
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::disableInterrupt" name="disableInterrupt" virtual="yes">
    <brief> Disables an interrupt source</brief>
    <doc>This function disables the interrupt source via the GPIO controller or passing it onto the APCI device
depending on the configuration

</doc>
    <return>
      <doc>*kIOReturnSuccess* if the interrupt is sucessfully disabled, *kIOReturnNoInterrupt* if the interrupt source
is invalid</doc>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::disableInterrupt::source" name="source">
      <doc>The index of the interrupt source in the case of APIC interrupts</doc>
      <type builtin="yes" name="int" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::enableInterrupt" name="enableInterrupt" virtual="yes">
    <brief> Enables an interrupt source</brief>
    <doc>This function enables the interrupt source via the GPIO controller or passing it onto the APCI device
depending on the configuration

</doc>
    <return>
      <doc>*kIOReturnSuccess* if the interrupt is sucessfully enabled, *kIOReturnNoInterrupt* if the interrupt source
is invalid</doc>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::enableInterrupt::source" name="source">
      <doc>The index of the interrupt source in the case of APIC interrupts</doc>
      <type builtin="yes" name="int" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::getInterruptType" name="getInterruptType" virtual="yes">
    <brief> Gets the type of an interrupt source</brief>
    <doc>This function gets the interrupt type for the given interrupt source. It stores in *interruptType* either *kIOInterruptTypeEdge* for edge-trigggered sources or *kIOInterruptTypeLevel* for level-trigggered sources.

</doc>
    <return>
      <doc>*kIOReturnSuccess* if the interrupt type is successfully found, *kIOReturnNoInterrupt* if the interrupt source
is invalid</doc>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::getInterruptType::source" name="source">
      <doc>The index of the interrupt source in the case of APIC interrupts</doc>
      <type builtin="yes" name="int" />
    </argument>
    <argument id="VoodooI2CDeviceNub::getInterruptType::interruptType" name="interruptType">
      <doc>The interrupt type for the interrupt source will be stored here</doc>
      <type builtin="yes" name="int" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::getMetaClass" name="getMetaClass" virtual="yes">
    <return>
      <type name="OSMetaClass" qualifier=" const *" />
    </return>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::getWorkLoop" name="getWorkLoop">
    <brief> Gets an *IOWorkLoop* object</brief>
    <doc>This function either grabs the existing workloop or creates a new one if none is found. This workloop is intended to be used by
the nub itself along with any drivers that attach to it.
</doc>
    <return>
      <doc>A pointer to an *IOWorkLoop* object, else *NULL*</doc>
      <type name="IOWorkLoop" qualifier="*" />
    </return>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::readI2C" name="readI2C">
    <brief> Transmits an I2C read request to the slave device</brief>
    <doc>This function instructs the controller to read data from an I2C slave device. WARNING: This function is not safe to call from an interrupt context.

</doc>
    <return>
      <doc>*kIOReturnSuccess* upon a successful read, *kIOReturnBusy* if the bus is busy, *kIOReturnTimeout* if the controller driver waits too long for the controller to assert its interrupt line, *kIOReturnError* otherwise</doc>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::readI2C::values" name="values">
      <doc>The buffer that the returned data is to be written into</doc>
      <type name="UInt8" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::readI2C::length" name="length">
      <doc>The length of the message</doc>
      <type name="UInt16" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::registerInterrupt" name="registerInterrupt" virtual="yes">
    <brief> Registers a slave for interrupts</brief>
    <doc>This function is called during the slave driver's initialisation process in order to register it for interrupts.

</doc>
    <return>
      <doc>*kIOReturnSuccess* upon a successful registration, *kIOReturnNoInterrupt* if the interrupt source is invalid, *kIOReturnNoResources* if
the interrupt already has an installed handler</doc>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::registerInterrupt::source" name="source">
      <doc>The index of the interrupt source in the case of APIC interrupts</doc>
      <type builtin="yes" name="int" />
    </argument>
    <argument id="VoodooI2CDeviceNub::registerInterrupt::target" name="target">
      <doc>The slave driver</doc>
      <type name="OSObject" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::registerInterrupt::handler" name="handler">
      <doc>The interrupt handler callback</doc>
      <type name="IOInterruptAction" />
    </argument>
    <argument id="VoodooI2CDeviceNub::registerInterrupt::refcon" name="refcon">
      <doc>A reference constant</doc>
      <type builtin="yes" name="void" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::start" name="start" virtual="yes">
    <brief> Starts the device nub</brief>
    <doc>This function is called by the controller to start the resources needed for the device nub.

</doc>
    <return>
      <doc>*true* on successful start, *false* otherwise</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="VoodooI2CDeviceNub::start::provider" name="provider">
      <doc>The controller that drives this slave device</doc>
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::stop" name="stop" virtual="yes">
    <brief> Stops the device nub</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="VoodooI2CDeviceNub::stop::provider" name="provider">
      <doc>The controller that drives this slave device</doc>
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::unregisterInterrupt" name="unregisterInterrupt" virtual="yes">
    <brief> Unregisters a slave for interrupts</brief>
    <doc>This function is called during the slave driver's exit process in order to unregister it for interrupts.

</doc>
    <return>
      <doc>*kIOReturnSuccess* upon a successful unregistration, *kIOReturnNoInterrupt* if the interrupt source is invalid</doc>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::unregisterInterrupt::source" name="source">
      <doc>he index of the interrupt source in the case of APIC interrupts</doc>
      <type builtin="yes" name="int" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::writeI2C" name="writeI2C">
    <brief> Transmits an I2C write request to the slave device</brief>
    <doc>This function instructs the controller to write data to an I2C slave device. WARNING: This function is not safe to call from an interrupt context.

</doc>
    <return>
      <doc>*kIOReturnSuccess* upon a successful read, *kIOReturnBusy* if the bus is busy, *kIOReturnTimeout* if the controller driver waits too long for the controller to assert its interrupt line, *kIOReturnError* otherwise</doc>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::writeI2C::values" name="values">
      <doc>A buffer containing the message to be written</doc>
      <type name="UInt8" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::writeI2C::length" name="length">
      <doc>The length of the message</doc>
      <type name="UInt16" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CDeviceNub::writeReadI2C" name="writeReadI2C">
    <brief> Transmits an I2C write-read request to the slave device</brief>
    <doc>This function instructs the controller to write data to an I2C slave device and then requests a read from the I2C slave device. WARNING: This function is not safe to call from an interrupt context.

</doc>
    <return>
      <doc>*kIOReturnSuccess* upon a successful read, *kIOReturnBusy* if the bus is busy, *kIOReturnTimeout* if the controller driver waits too long for the controller to assert its interrupt line, *kIOReturnError* otherwise</doc>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::writeReadI2C::write_buffer" name="write_buffer">
      <doc>A buffer containing the message to be written</doc>
      <type name="UInt8" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::writeReadI2C::write_length" name="write_length">
      <doc>The length of the write message</doc>
      <type name="UInt16" />
    </argument>
    <argument id="VoodooI2CDeviceNub::writeReadI2C::read_buffer" name="read_buffer">
      <doc>The buffer that the returned data is to be written into</doc>
      <type name="UInt8" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::writeReadI2C::read_length" name="read_length">
      <doc>The length of the read message</doc>
      <type name="UInt16" />
    </argument>
  </method>
  <constructor abstract="yes" access="protected" id="VoodooI2CDeviceNub::VoodooI2CDeviceNub" name="VoodooI2CDeviceNub">
    <argument id="VoodooI2CDeviceNub::VoodooI2CDeviceNub::" name="">
      <type name="OSMetaClass" qualifier=" const *" />
    </argument>
  </constructor>
  <destructor abstract="yes" access="protected" id="VoodooI2CDeviceNub::~VoodooI2CDeviceNub" name="~VoodooI2CDeviceNub" virtual="yes" />
  <variable access="private" id="VoodooI2CDeviceNub::superClass" name="superClass">
    <type name="OSMetaClass" qualifier=" const const *" />
  </variable>
  <field access="private" id="VoodooI2CDeviceNub::acpi_device" name="acpi_device">
    <type name="IOACPIPlatformDevice" qualifier="*" />
  </field>
  <field access="private" id="VoodooI2CDeviceNub::command_gate" name="command_gate">
    <type name="IOCommandGate" qualifier="*" />
  </field>
  <field access="private" id="VoodooI2CDeviceNub::controller" name="controller">
    <type name="VoodooI2CControllerDriver" qualifier="*" ref="VoodooI2CControllerDriver#VoodooI2CControllerDriver" />
  </field>
  <field access="private" id="VoodooI2CDeviceNub::controller_name" name="controller_name">
    <type builtin="yes" name="char" qualifier=" const *" />
  </field>
  <field access="private" id="VoodooI2CDeviceNub::gpio_controller" name="gpio_controller">
    <type name="VoodooGPIO" qualifier="*" />
  </field>
  <field access="private" id="VoodooI2CDeviceNub::gpio_irq" name="gpio_irq">
    <type builtin="yes" name="int" />
  </field>
  <field access="private" id="VoodooI2CDeviceNub::gpio_pin" name="gpio_pin">
    <type name="UInt16" />
  </field>
  <field access="private" id="VoodooI2CDeviceNub::i2c_address" name="i2c_address">
    <type name="UInt8" />
  </field>
  <field access="private" id="VoodooI2CDeviceNub::has_gpio_interrupts" name="has_gpio_interrupts">
    <type builtin="yes" name="bool" />
  </field>
  <field access="private" id="VoodooI2CDeviceNub::use_10bit_addressing" name="use_10bit_addressing">
    <type builtin="yes" name="bool" />
  </field>
  <field access="private" id="VoodooI2CDeviceNub::work_loop" name="work_loop">
    <type name="IOWorkLoop" qualifier="*" />
  </field>
  <method abstract="yes" access="private" id="VoodooI2CDeviceNub::getDeviceResources" name="getDeviceResources">
    <brief> Instantiates a <ref ref="VoodooI2CACPICRSParser#VoodooI2CACPICRSParser">VoodooI2CACPICRSParser</ref> object to grab I2C slave properties as well as potential GPIO interrupt properties.</brief>
    <return>
      <doc>*kIOReturnSuccess* upon a successfull *_CRS* parse, *kIOReturnNotFound* if no I2C slave properties were found.</doc>
      <type name="IOReturn" />
    </return>
  </method>
  <method abstract="yes" access="private" id="VoodooI2CDeviceNub::getGPIOController" name="getGPIOController">
    <brief> Searches the IOService plane to find a &amp;lt;VoodooGPIO&amp;gt; controller object.</brief>
    <return>
      <type name="VoodooGPIO" qualifier="*" />
    </return>
  </method>
  <method abstract="yes" access="private" id="VoodooI2CDeviceNub::readI2CGated" name="readI2CGated">
    <brief> Transmits an I2C read request to the slave device</brief>
    <doc>This function is the gated version of <ref ref="VoodooI2CDeviceNub#VoodooI2CDeviceNub::readI2C">VoodooI2CDeviceNub::readI2C</ref>.

</doc>
    <return>
      <doc>*kIOReturnSuccess* upon a successful read, *kIOReturnBusy* if the bus is busy, *kIOReturnTimeout* if the controller driver waits too long for the controller to assert its interrupt line, *kIOReturnError* otherwise</doc>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::readI2CGated::values" name="values">
      <doc>The buffer that the returned data is to be written into</doc>
      <type name="UInt8" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::readI2CGated::length" name="length">
      <doc>The length of the message</doc>
      <type name="UInt16" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" access="private" id="VoodooI2CDeviceNub::releaseResources" name="releaseResources">
    <brief> Releases resources allocated in <ref ref="VoodooI2CDeviceNub#VoodooI2CDeviceNub::start">VoodooI2CDeviceNub::start</ref>
    </brief>
    <doc>This function is called during a graceful exit from <ref ref="VoodooI2CDeviceNub#VoodooI2CDeviceNub::start">VoodooI2CDeviceNub::start</ref> and during
execution of <ref ref="VoodooI2CDeviceNub#VoodooI2CDeviceNub::stop">VoodooI2CDeviceNub::stop</ref> in order to release resources retained by <ref ref="VoodooI2CDeviceNub#VoodooI2CDeviceNub::start">VoodooI2CDeviceNub::start</ref>.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" access="private" id="VoodooI2CDeviceNub::writeI2CGated" name="writeI2CGated">
    <brief> Transmits an I2C write request to the slave device</brief>
    <doc>This function is the gated version of <ref ref="VoodooI2CDeviceNub#VoodooI2CDeviceNub::writeI2C">VoodooI2CDeviceNub::writeI2C</ref>.

</doc>
    <return>
      <doc>*kIOReturnSuccess* upon a successful read, *kIOReturnBusy* if the bus is busy, *kIOReturnTimeout* if the controller driver waits too long for the controller to assert its interrupt line, *kIOReturnError* otherwise</doc>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::writeI2CGated::values" name="values">
      <doc>A buffer containing the message to be written</doc>
      <type name="UInt8" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::writeI2CGated::length" name="length">
      <doc>The length of the message</doc>
      <type name="UInt16" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" access="private" id="VoodooI2CDeviceNub::writeReadI2CGated" name="writeReadI2CGated">
    <brief> Transmits an I2C write-read request to the slave device</brief>
    <doc>This function is the gated version of <ref ref="VoodooI2CDeviceNub#VoodooI2CDeviceNub::writeReadI2C">VoodooI2CDeviceNub::writeReadI2C</ref>.

</doc>
    <return>
      <doc>*kIOReturnSuccess* upon a successful read, *kIOReturnBusy* if the bus is busy, *kIOReturnTimeout* if the controller driver waits too long for the controller to assert its interrupt line, *kIOReturnError* otherwise</doc>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CDeviceNub::writeReadI2CGated::write_buffer" name="write_buffer">
      <doc>A buffer containing the message to be written</doc>
      <type name="UInt8" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::writeReadI2CGated::write_length" name="write_length">
      <doc>The length of the write message</doc>
      <type name="UInt16" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::writeReadI2CGated::read_buffer" name="read_buffer">
      <doc>The buffer that the returned data is to be written into</doc>
      <type name="UInt8" qualifier="*" />
    </argument>
    <argument id="VoodooI2CDeviceNub::writeReadI2CGated::read_length" name="read_length">
      <doc>The length of the read message</doc>
      <type name="UInt16" qualifier="*" />
    </argument>
  </method>
</class>
