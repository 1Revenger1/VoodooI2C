<?xml version='1.0' encoding='utf-8'?>
<class id="VoodooI2CACPIController" interface="true" name="VoodooI2CACPIController" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief> Implements an ACPI Intel LPSS Designware I2C Controller</brief>
  <doc>The members of this class are responsible for low-level interfacing with the physical ACPI hardware.
</doc>
  <base access="public">
    <type name="VoodooI2CController" />
  </base>
  <variable id="VoodooI2CACPIController::gMetaClass" name="gMetaClass">
    <type name="MetaClass" ref="VoodooI2CACPIController::MetaClass#VoodooI2CACPIController::MetaClass" />
  </variable>
  <variable id="VoodooI2CACPIController::metaClass" name="metaClass">
    <type name="OSMetaClass" qualifier=" const const *" />
  </variable>
  <class name="MetaClass" ref="VoodooI2CACPIController::MetaClass#VoodooI2CACPIController::MetaClass" />
  <constructor abstract="yes" id="VoodooI2CACPIController::VoodooI2CACPIController" name="VoodooI2CACPIController" />
  <method abstract="yes" id="VoodooI2CACPIController::getMetaClass" name="getMetaClass" virtual="yes">
    <return>
      <type name="OSMetaClass" qualifier=" const *" />
    </return>
  </method>
  <constructor abstract="yes" access="protected" id="VoodooI2CACPIController::VoodooI2CACPIController" name="VoodooI2CACPIController">
    <argument id="VoodooI2CACPIController::VoodooI2CACPIController::" name="">
      <type name="OSMetaClass" qualifier=" const *" />
    </argument>
  </constructor>
  <destructor abstract="yes" access="protected" id="VoodooI2CACPIController::~VoodooI2CACPIController" name="~VoodooI2CACPIController" virtual="yes" />
  <variable access="private" id="VoodooI2CACPIController::superClass" name="superClass">
    <type name="OSMetaClass" qualifier=" const const *" />
  </variable>
  <method abstract="yes" access="private" id="VoodooI2CACPIController::setACPIPowerState" name="setACPIPowerState">
    <brief> Instructs the controller to enter a specific power state by evaluating the ACPI power state methods</brief>
    <return>
      <doc>*kIOReturnSuccess* on successful state change, *kIOReturnNoPower* otherwise</doc>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CACPIController::setACPIPowerState::enabled" name="enabled">
      <doc>The power state the device is expected to enter represented by either &amp;lt;kVoodooI2CStateOn&amp;gt; or
 &amp;lt;kVoodooI2CStateOff&amp;gt;</doc>
      <type name="VoodooI2CState" />
    </argument>
  </method>
  <method abstract="yes" access="private" id="VoodooI2CACPIController::setPowerState" name="setPowerState" virtual="yes">
    <brief>@inherit</brief>
    <return>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CACPIController::setPowerState::whichState" name="whichState">
      <type builtin="yes" name="unsigned long" />
    </argument>
    <argument id="VoodooI2CACPIController::setPowerState::whatDevice" name="whatDevice">
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" access="private" id="VoodooI2CACPIController::start" name="start" virtual="yes">
    <brief>@inherit</brief>
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="VoodooI2CACPIController::start::provider" name="provider">
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" access="private" id="VoodooI2CACPIController::stop" name="stop" virtual="yes">
    <brief>@inherit</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="VoodooI2CACPIController::stop::provider" name="provider">
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
</class>
