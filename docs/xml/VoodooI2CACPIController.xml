<?xml version='1.0' encoding='utf-8'?>
<class id="VoodooI2CACPIController" interface="true" name="VoodooI2CACPIController" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief> Implements an ACPI Intel LPSS Designware I2C Controller</brief>
  <doc>The members of this class are responsible for low-level interfacing with the physical ACPI hardware.
</doc>
  <base access="public">
    <type name="VoodooI2CController" ref="VoodooI2CController#VoodooI2CController" />
    <brief> Implements an Intel LPSS Designware I2C Controller</brief>
  </base>
  <variable id="VoodooI2CACPIController::gMetaClass" name="gMetaClass">
    <type name="MetaClass" ref="VoodooI2CACPIController::MetaClass#VoodooI2CACPIController::MetaClass" />
  </variable>
  <variable id="VoodooI2CACPIController::metaClass" name="metaClass">
    <type name="OSMetaClass" qualifier=" const const *" />
  </variable>
  <class name="MetaClass" ref="VoodooI2CACPIController::MetaClass#VoodooI2CACPIController::MetaClass" />
  <constructor abstract="yes" id="VoodooI2CACPIController::VoodooI2CACPIController" name="VoodooI2CACPIController" />
  <method abstract="yes" id="VoodooI2CACPIController::getMetaClass" name="getMetaClass" override="yes" virtual="yes">
    <return>
      <type name="OSMetaClass" qualifier=" const *" />
    </return>
    <override name="VoodooI2CController::getMetaClass" ref="VoodooI2CController#VoodooI2CController::getMetaClass" />
  </method>
  <constructor abstract="yes" access="protected" id="VoodooI2CACPIController::VoodooI2CACPIController" name="VoodooI2CACPIController">
    <argument id="VoodooI2CACPIController::VoodooI2CACPIController::" name="">
      <type name="OSMetaClass" qualifier=" const *" />
    </argument>
  </constructor>
  <destructor abstract="yes" access="protected" id="VoodooI2CACPIController::~VoodooI2CACPIController" name="~VoodooI2CACPIController" virtual="yes" />
  <variable access="private" id="VoodooI2CACPIController::superClass" name="superClass">
    <type name="OSMetaClass" qualifier=" const const *" />
  </variable>
  <method abstract="yes" access="private" id="VoodooI2CACPIController::setACPIPowerState" name="setACPIPowerState">
    <brief> Instructs the controller to enter a specific power state by evaluating the ACPI power state methods</brief>
    <return>
      <doc>*kIOReturnSuccess* on successful state change, *kIOReturnNoPower* otherwise</doc>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CACPIController::setACPIPowerState::enabled" name="enabled">
      <doc>The power state the device is expected to enter represented by either <ref ref="#kVoodooI2CStateOn">kVoodooI2CStateOn</ref> or
 <ref ref="#kVoodooI2CStateOff">kVoodooI2CStateOff</ref></doc>
      <type name="VoodooI2CState" ref="index#VoodooI2CState" />
    </argument>
  </method>
  <method abstract="yes" access="private" id="VoodooI2CACPIController::setPowerState" name="setPowerState" override="yes" virtual="yes">
    <brief> Sets the physical power state of the controller</brief>
    <doc>This function is called by the operating system's power management services
to instruct the controller to enter a certain power state.

</doc>
    <return>
      <doc>*kIOPMAckImplied* on succesful state change, *kIOReturnError* otherwise</doc>
      <type name="IOReturn" />
    </return>
    <argument id="VoodooI2CACPIController::setPowerState::whichState" name="whichState">
      <doc>The power state the device is expected to enter represented by either
 *kIOPMPowerOn* or *kIOPMPowerOff*</doc>
      <type builtin="yes" name="unsigned long" />
    </argument>
    <argument id="VoodooI2CACPIController::setPowerState::whatDevice" name="whatDevice">
      <doc>The power management policy maker</doc>
      <type name="IOService" qualifier="*" />
    </argument>
    <override name="VoodooI2CController::setPowerState" ref="VoodooI2CController#VoodooI2CController::setPowerState" />
  </method>
  <method abstract="yes" access="private" id="VoodooI2CACPIController::start" name="start" override="yes" virtual="yes">
    <brief> Starts the physical controller</brief>
    <doc>This function is called after <ref ref="VoodooI2CController#VoodooI2CController::probe">VoodooI2CController::probe</ref> and is responsible for allocating the resources
needed by the physical controller. This includes initialising system power management
and calling <ref ref="VoodooI2CController#VoodooI2CController::publishNub">VoodooI2CController::publishNub</ref>.

</doc>
    <return>
      <doc>*true* on successful start, *false* otherwise</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="VoodooI2CACPIController::start::provider" name="provider">
      <doc>The provider which we have matched against</doc>
      <type name="IOService" qualifier="*" />
    </argument>
    <override name="VoodooI2CController::start" ref="VoodooI2CController#VoodooI2CController::start" />
  </method>
  <method abstract="yes" access="private" id="VoodooI2CACPIController::stop" name="stop" override="yes" virtual="yes">
    <brief> Stops the physical controller</brief>
    <doc>This function is called before <ref ref="VoodooI2CController#VoodooI2CController::free">VoodooI2CController::free</ref> and is responsible for deallocating the resources
that were allocated in <ref ref="VoodooI2CACPIController#VoodooI2CACPIController::start">VoodooI2CACPIController::start</ref> and <ref ref="VoodooI2CController#VoodooI2CController::start">VoodooI2CController::start</ref>. This includes stopping system power management and
stopping the associated controller nub.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="VoodooI2CACPIController::stop::provider" name="provider">
      <doc>The provider which we have matched against</doc>
      <type name="IOService" qualifier="*" />
    </argument>
    <override name="VoodooI2CController::stop" ref="VoodooI2CController#VoodooI2CController::stop" />
  </method>
</class>
