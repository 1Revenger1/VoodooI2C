<?xml version='1.0' encoding='utf-8'?>
<class id="VoodooI2CServices" interface="true" name="VoodooI2CServices" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>Provides various services to all VoodooI2C related classes.</brief>
  <base access="public">
    <type name="IOService" />
  </base>
  <variable id="VoodooI2CServices::gMetaClass" name="gMetaClass">
    <type name="MetaClass" ref="VoodooI2CServices::MetaClass#VoodooI2CServices::MetaClass" />
  </variable>
  <variable id="VoodooI2CServices::gVoodooI2CPlane" name="gVoodooI2CPlane">
    <type name="IORegistryPlane" qualifier=" const *" />
  </variable>
  <variable id="VoodooI2CServices::metaClass" name="metaClass">
    <type name="OSMetaClass" qualifier=" const const *" />
  </variable>
  <class name="MetaClass" ref="VoodooI2CServices::MetaClass#VoodooI2CServices::MetaClass" />
  <constructor abstract="yes" id="VoodooI2CServices::VoodooI2CServices" name="VoodooI2CServices" />
  <method abstract="yes" id="VoodooI2CServices::getMetaClass" name="getMetaClass" virtual="yes">
    <return>
      <type name="OSMetaClass" qualifier=" const *" />
    </return>
  </method>
  <method abstract="yes" id="VoodooI2CServices::start" name="start" virtual="yes">
    <brief> Starts the services kext</brief>
    <doc>This function is responsible for initialising the VoodooI2C plane and the logger.
</doc>
    <return>
      <doc>*true* on successful start, *false* otherwise</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="VoodooI2CServices::start::provider" name="provider">
      <doc>IOResources</doc>
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" id="VoodooI2CServices::stop" name="stop" virtual="yes">
    <brief> Stops the services kext</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="VoodooI2CServices::stop::provider" name="provider">
      <doc>IOResources</doc>
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
  <constructor abstract="yes" access="protected" id="VoodooI2CServices::VoodooI2CServices" name="VoodooI2CServices">
    <argument id="VoodooI2CServices::VoodooI2CServices::" name="">
      <type name="OSMetaClass" qualifier=" const *" />
    </argument>
  </constructor>
  <destructor abstract="yes" access="protected" id="VoodooI2CServices::~VoodooI2CServices" name="~VoodooI2CServices" virtual="yes" />
  <variable access="private" id="VoodooI2CServices::superClass" name="superClass">
    <type name="OSMetaClass" qualifier=" const const *" />
  </variable>
  <field access="private" id="VoodooI2CServices::device_matcher" name="device_matcher">
    <type name="IONotifier" qualifier="*" />
  </field>
  <field access="private" id="VoodooI2CServices::terminate_matcher" name="terminate_matcher">
    <type name="IONotifier" qualifier="*" />
  </field>
  <method abstract="yes" access="private" id="VoodooI2CServices::attachDevice" name="attachDevice" static="yes">
    <brief> Called to attach a VoodooI2C related service into the VoodooI2C plane</brief>
    <doc><ref ref="VoodooI2CServices#VoodooI2CServices::attachDevice::new_service">new_service</ref> will always be a VoodooI2C class with the "VoodooI2CServices Supported" property set to *true*

</doc>
    <return>
      <doc>*true* on successful attach, *false* otherwise</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="VoodooI2CServices::attachDevice::target" name="target">
      <doc>The VoodooI2CServices instance</doc>
      <type builtin="yes" name="void" qualifier="*" />
    </argument>
    <argument id="VoodooI2CServices::attachDevice::ref_con" name="ref_con">
      <doc>A reference constant</doc>
      <type builtin="yes" name="void" qualifier="*" />
    </argument>
    <argument id="VoodooI2CServices::attachDevice::new_service" name="new_service">
      <doc>The service to be attached</doc>
      <type name="IOService" qualifier="*" />
    </argument>
    <argument id="VoodooI2CServices::attachDevice::notifier" name="notifier">
      <doc>The IONotifier listening for matching services</doc>
      <type name="IONotifier" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" access="private" id="VoodooI2CServices::detachDevice" name="detachDevice" static="yes">
    <brief> Called to detach a VoodooI2C related service from the VoodooI2C plane</brief>
    <doc><ref ref="VoodooI2CServices#VoodooI2CServices::detachDevice::new_service">new_service</ref> will always be a VoodooI2C class with the "VoodooI2CServices Supported" property set to *true*

</doc>
    <return>
      <doc>*true* on successful detach, *false* otherwise</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="VoodooI2CServices::detachDevice::target" name="target">
      <doc>The VoodooI2CServices instance</doc>
      <type builtin="yes" name="void" qualifier="*" />
    </argument>
    <argument id="VoodooI2CServices::detachDevice::ref_con" name="ref_con">
      <doc>A reference constant</doc>
      <type builtin="yes" name="void" qualifier="*" />
    </argument>
    <argument id="VoodooI2CServices::detachDevice::new_service" name="new_service">
      <doc>The service to be detached</doc>
      <type name="IOService" qualifier="*" />
    </argument>
    <argument id="VoodooI2CServices::detachDevice::notifier" name="notifier">
      <doc>The IONotifier listening for terminating services</doc>
      <type name="IONotifier" qualifier="*" />
    </argument>
  </method>
</class>
